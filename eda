Exploratory Data Analysis (EDA) for Your Data
{r}

# Load required libraries
library(GEOquery)
library(limma)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(reshape2)
library(ggfortify)
library(knitr)
library(tidyverse)
1. Load Data

# GSE dataset loading
gse_data <- getGEO("GSEXXXXX", GSEMatrix = TRUE)[[1]] # Replace with the correct GSE ID
exprs_data <- exprs(gse_data)
pdata_data <- pData(gse_data)
2. Inspect Datasets
2.1 Overview + Histograms


# Overview of dimensions and summary
dim(exprs_data)  # Rows: genes, Columns: samples
summary(exprs_data)
hist(exprs_data, breaks=100, main="GSE Expression", xlab="Expression Level")
2.2 Summarized Table

# Summarizing expression data
summarised_data <- as.data.frame(t(apply(exprs_data, 2, summary)))
summarised_data$SampleID <- rownames(summarised_data)
summarised_data <- summarised_data %>%
  relocate(SampleID) %>%
  rename(
    Min = "Min.",
    Q1 = "1st Qu.",
    Median = "Median",
    Mean = "Mean",
    Q3 = "3rd Qu.",
    Max = "Max."
  )
View summarized data
head(summarised_data)

Display summarized data in table format
kable(summarised_data, caption = "Summary Statistics for GSE Samples")

2.3 Box Plot Overview

# Create long format for the box plot
summarised_long_data <- summarised_data %>%
  pivot_longer(cols = -SampleID, names_to = "Statistic", values_to = "Value")

# Plot box plots for summary statistics
ggplot(summarised_long_data, aes(x = Statistic, y = Value)) +
  geom_boxplot() +
  facet_wrap(~ Statistic, scales = "free") +
  ggtitle("Distribution of Summary Stats Across Samples") +
  theme_minimal()
2.4 Box Plot per Sample
{r}

# Box plot per sample for the expression data
boxplot(exprs_data, outline=FALSE, las=2, main="GSE Expression per Sample")
3. PCA Plot
3.1 Clean Data Labels
{r}

# Add tissue labels (normal vs tumor or relevant categories based on your dataset)
pdata_data$Tissue <- ifelse(grepl("non-tumor", pdata_data$source_name_ch1, ignore.case = TRUE),
                            "Normal", "Tumor")
pdata_data$Tissue <- factor(pdata_data$Tissue)
table(pdata_data$Tissue)  # Check label assignment
3.2 Plot PCA
{r}

# Perform PCA and plot results
expr_data_transposed <- t(exprs_data)
autoplot(prcomp(expr_data_transposed, scale. = TRUE),
         data = pdata_data,
         colour = 'Tissue') +
  ggtitle("PCA of GSE Samples") +
  theme_minimal()
4. Heatmap
{r}

# Generate heatmap for top variable genes
expr_matrix <- exprs_data
gene_variance <- apply(expr_matrix, 1, var)
top_genes <- names(sort(gene_variance, decreasing = TRUE)[1:100])

# Tissue labels for annotation
pdata_data$Tissue <- factor(pdata_data$Tissue)
annotation_col_data <- data.frame(Tissue = pdata_data$Tissue)
rownames(annotation_col_data) <- rownames(pdata_data)

# Generate the heatmap
pheatmap(expr_matrix[top_genes, ],
         scale = "row",
         show_rownames = FALSE,
         show_colnames = FALSE,
         annotation_col = annotation_col_data,
         main = "Top 100 Variable Genes Heatmap (Annotated)")
5. Differential Expression Analysis (Optional)
{r}
# Placeholder for differential expression analysis code
# Example using limma package for comparison of normal vs tumor samples
design <- model.matrix(~ 0 + pdata_data$Tissue)
colnames(design) <- c("Normal", "Tumor")
fit <- lmFit(expr_matrix, design)
fit <- eBayes(fit)

# View top differential genes
top_table <- topTable(fit, coef="Tumor", adjust="fdr", number=10)
print(top_table)
