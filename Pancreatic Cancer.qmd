---
title: "pancreatic_cancer"
format: html
editor: visual
---

```{r SETUP, echo=FALSE}

library(GEOquery) 
library(tidyr)
```

```{r GET_DATA, echo=FALSE}

extract_gene_symbol <- function(gene_assignment) {
  # Split the string by //
  parts <- strsplit(gene_assignment, " // ")[[1]]
  
  # Return the second element (gene symbol)
  if (length(parts) >= 2) {
    return(trimws(parts[2]))
  } else {
    return(NA)
  }
}

extract_gse_data <- function(gse) {
  # filteredFeatureData <- fData(gse) %>% filter(gene_assignment != "---")
  # filteredFeatureData$gene_symbol <- sapply(filteredFeatureData$gene_assignment, extract_gene_symbol)
  return(list(
    featureData = fData(gse),
    phenoData = pData(gse),
    eMat = exprs(gse)
  ))
}

GSE78229 <- getGEO("GSE78229")$GSE78229_series_matrix.txt.gz %>% extract_gse_data()
GSE28735 <- getGEO("GSE28735")$GSE28735_series_matrix.txt.gz %>% extract_gse_data()
GSE62452 <- getGEO("GSE62452")$GSE62452_series_matrix.txt.gz %>% extract_gse_data()


```

```{r GENE_INTERSECTION}
find_shared_and_unique_genes <- function(gse1, gse2) {
  genes1 <- rownames(gse1$eMat)
  genes2 <- rownames(gse2$eMat)
  
  shared_genes <- intersect(genes1, genes2)
  
  unique_genes_1 <- setdiff(genes1, genes2)
  unique_genes_2 <- setdiff(genes2, genes1)
  
   return(list(
    size_dif = length(genes1) - length(genes2),
    shared_genes_count = length(shared_genes),
    shared_genes = shared_genes,
    unique_1 = unique_genes_1,
    unique_2 = unique_genes_2
  )) 
}

result_GSE78229_GSE28735 <- find_shared_and_unique_genes(GSE78229, GSE28735)
result_GSE78229_GSE62452 <- find_shared_and_unique_genes(GSE78229, GSE62452)
result_GSE28735_GSE62452 <- find_shared_and_unique_genes(GSE28735, GSE62452)

print(dim(GSE78229$eMat))
print(dim(GSE62452$eMat))
print(dim(GSE28735$eMat))
```

```{r COMBINE_EMAT}
find_common_genes <- function(...) {
  matrices <- list(...)
  common_genes <- Reduce(intersect, lapply(matrices, rownames))
  return(common_genes)
}

common_genes <- find_common_genes(GSE28735$eMat, GSE62452$eMat)

# subset_eMat_GSE78229 <- GSE78229$eMat[common_genes, ]
subset_eMat_GSE28735 <- GSE28735$eMat[common_genes, ]
subset_eMat_GSE62452 <- GSE62452$eMat[common_genes, ]

#combined_matrix <- cbind(subset_eMat_GSE78229, subset_eMat_GSE28735, subset_eMat_GSE62452)

combined_matrix <- cbind(subset_eMat_GSE28735, subset_eMat_GSE62452)

print(dim(combined_matrix))
```

```{r FILTER_28735_PHENO}

GSE28735$phenoData$is_dead <- as.numeric(
  replace(
    GSE28735$phenoData$`cancer_death:ch1`, 
    GSE28735$phenoData$`cancer_death:ch1` == "na", NA
    )
  )

non_tumor_rows <- grepl("non-tumor tissue", GSE28735$phenoData$`source_name_ch1`)

filtered_tumor <- GSE28735$phenoData[!non_tumor_rows, ]

filtered_28735 <- filtered_tumor[!is.na(filtered_tumor$is_dead), ] %>% rename(months_survived = `survival_month:ch1`)

nrow(filtered_28735)
```

```{r FILTER_62452_PHENO}
GSE62452$phenoData$is_dead <- as.numeric(
  replace(
    GSE62452$phenoData$`survival status:ch1`,
    GSE62452$phenoData$`survival status:ch1` %in% c("na", "?"), NA
    )
  )

tumor_rows <- grepl("Pancreatic tumor", GSE62452$phenoData$`tissue:ch1`)

filtered_tumor <- GSE62452$phenoData[tumor_rows, ]

filtered_62452 <- filtered_tumor[!is.na(filtered_tumor$is_dead), ] %>%
  rename(months_survived = `survival months:ch1`)

nrow(filtered_62452)
```

```{r COMBINE_PHENO_DATA}
library(dplyr)

combined_pheno <- bind_rows(filtered_28735, filtered_62452)
filtered_matrix <- combined_matrix[, colnames(combined_matrix) %in% rownames(combined_pheno)]

dim(filtered_matrix)

gse <- list(
  featureData = GSE28735$featureData,
  phenoData = combined_pheno,
  eMat = filtered_matrix
)
```

```{r MDRF_FEATURE_SELECTION}
library(randomForestSRC)

gse$phenoData$months_survived <- as.factor(gse$phenoData$months_survived)

  
# Expression matrix: genes as columns, samples as rows
expr_df <- as.data.frame(t(gse$eMat))
expr_df$sample_id <- rownames(expr_df)

# Phenotype data
pheno <- gse$phenoData
pheno$sample_id <- rownames(pheno)

# Merge to create the full dataset
merged_data <- merge(expr_df, pheno[, c("sample_id", "months_survived", "is_dead")], by = "sample_id")
merged_data$sample_id <- NULL

# Run survival forest model
set.seed(42)
rf_model <- rfsrc(Surv(months_survived, is_dead) ~ ., data = merged_data, ntree = 500, forest = TRUE)

# Compute minimum depth of each variable
md_info <- max.subtree(rf_model)$order[, 1]  # gives a named vector: variable -> depth

# Sort and select top genes (e.g., top 50)
top_genes <- names(sort(md_info))[1:50]

```

```{r VISUALISE_FS}

# Already computed this before:
md_info <- max.subtree(rf_model)$order[, 1]

# Sort and make a dataframe
md_df <- data.frame(
  gene = names(md_info),
  depth = as.numeric(md_info)
)
top_md_df <- md_df[order(md_df$depth), ][1:30, ]  # top 30

# Barplot
library(ggplot2)

ggplot(top_md_df, aes(x = reorder(gene, -depth), y = depth)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = "Top Genes by Minimum Depth",
       x = "Gene", y = "Minimum Depth")


```
